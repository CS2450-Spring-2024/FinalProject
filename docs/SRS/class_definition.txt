CPU Class
Purpose of the Class
The CPU class represents a Central Processing Unit that does instructions stored in memory. 
It interacts with memory and does various operations based on the opcode of the current instruction.

Class Attributes: 
    self.accumulator : An integer that stored the data we are working with. 
    self.program_counter : An Integer that counts the steps in the program 
    self.memory : An array that represents the memory of the CPU
    self.halted : A boolean value that represents the state of the program


Functions:
1. __init__(self, memory)
    Purpose:
        Initializes the CPU with an initial state.
    Input Parameters:
        memory: An array representing the memory of the CPU.


2. error_code_to_text(self, code)
    Purpose:
        Converts error codes into human readable error messages.
    Input Parameters:
        code: An error code.
    Return Value:
        A string with the correct error message.

3. line_to_op_data(line)
    Purpose:
        pulls opcode and data from an instruction line.
    Input Parameters:
        line: An instruction line from memory.
    Return Value:
        A tuple that holds the opcode and data.

4. run_until_halt(self)
    Purpose:
        Does instructions in a loop until the CPU is halted.
    Input Parameters:
        None.
    Return Value:
        An error code with the reason for halting.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The CPU could be halted, and the state of the memory may be modified.

5. run_one_instruction(self)
    Purpose:
        Does a single instruction.
    Input Parameters:
        None.
    Return Value:
        An error code saying the result of the instruction that was executed.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The state of the memory and CPU registers may be modified.

6. read(self, data, user_input=False)
    Purpose:
        Reads input from the user and stores it in memory.
    Input Parameters:
        data: The memory location where the input will be stored.
        user_input: User-provided input.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The memory location is updated with the user input.

7. write(self, data)
    Purpose:
        Writes a word from memory to the console.
    Input Parameters:
        data: The memory location of the word that will be written.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The word is printed to the console.

8. load(self, data)
    Purpose:
        Loads a word from memory into the accumulator.
    Input Parameters:
        data: The memory location of the word that will be loaded.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The accumulator is updated with the loaded word.

9. store(self, data)
    Purpose:
        Stores the value of the accumulator into a memory location.
    Input Parameters:
        data: The memory location where the accumulator value will be stored.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The specified memory location is updated with the accumulator value.

10. add(self, data)
    Purpose:
        Adds the value at a specified memory location to the accumulator.
    Input Parameters:
        data: The memory location of the value that will be added.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The accumulator is updated with the addition result.

11. subtract(self, data)
    Purpose:
        Subtracts the value at a specified memory location from the accumulator.
    Input Parameters:
        data: The memory location of the value that will be subtracted.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The accumulator is updated with the subtraction result.

12. divide(self, data)
    Purpose:
        Divides the accumulator by the value at a specified memory location.
    Input Parameters:
        data: The memory location of the number that will be divided.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
        The divisor can't be zero.
    Post-conditions:
        The accumulator is updated with the division result.

13. multiply(self, data)
    Purpose:
        Multiplies the accumulator by the value at a specified memory location.
    Input Parameters:
        data: The memory location of the number that will multiply.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The accumulator is updated with the multiplication result.

14. branch(self, data)
    Purpose:
        Branches to a specified memory location unconditionally.
    Input Parameters:
        data: The memory location to branch to.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
    The program counter is updated with the branch address.

15. branchneg(self, data)
    Purpose:
        Branches to a specified memory location if the accumulator is negative.
    Input Parameters:
        data: The memory location to branch to if the accumulator is negative.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The program counter may be updated based on the accumulator value.

16. branchzero(self, data)
    Purpose:
        Branches to a specified memory location if the accumulator is zero.
    Input Parameters:
        data: The memory location to branch to if the accumulator is zero.
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The program counter may be updated based on the accumulator value.

17. halt(self, data)
    Purpose:
        Halts the CPU.
    Input Parameters:
        data:
    Return Value:
        An error code showing the result of the operation.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The CPU is halted.

18. reset(self)
    Purpose:
        Resets the CPU to its initial state.
    Input Parameters:
        None.
    Return Value:
        None.
    Pre-conditions:
        None.
    Post-conditions:
        The CPU is reset to its initial state.

19. resume(self)
    Purpose:
        Resumes execution of the CPU until it is halted.
    Input Parameters:
        None.
    Return Value:
        None.
    Pre-conditions:
        The CPU needs to be initialized with a valid memory array.
    Post-conditions:
        The CPU may be halted, and the state of the memory may be modified.






Memory Class
Purpose of the Class
The Memory class represents the memory of the UVSim CPU in a GUI. 
It inherits from the tk.Frame class.  
It gives a visual representation of the memory by crating a grid of memory cells. 

Functions:
1. __init__(self, memory: list[int], master: tk.Misc | None, vcmd) -> None
    Purpose:
        Initializes the Memory class with the provided memory array and sets up the GUI elements to represent the memory.
    Input Parameters:
        memory: An array representing the memory content.
        master: The master widget of the memory frame.
        vcmd: The validation command for memory entries.
    Return Value:
        None.

2. __getitem__(self, key)
    Purpose:
        Allows accessing the memory content.
    Input Parameters:
        key: Index or slice to access the memory content.
    Return Value:
        The value at the index or slice.

3. __setitem__(self, key: str, value) -> None
    Purpose:
        Allows setting the memory content.
    Input Parameters:
        key: Index or slice to set the memory content.
        value: The value that will be set.
    Return Value:
        None.

4. property program_counter
    Purpose:
        Getter and setter for the program counter property. 
        It updates the GUI to highlight the current program counter cell.
    Input Parameters:
        None.
    Return Value:
        The current value of the program counter.

5. property halted
    Purpose:
        Getter and setter for the halted property. 
        It updates the GUI to highlight the current program counter cell with a different color if the CPU is halted.
    Input Parameters:
        None.
    Return Value:
        True if the CPU is halted, False otherwise.



Tutorial class
Purpose of the Class
The Tutorial class will display a tutorial for the UVSim application using images. 
It creates a simple Tkinter GUI with buttons to navigate through the tutorial images.

Functions:
1. __init__(self, master: tk.Tk) -> None
    Purpose:
        Initializes the Tutorial class with the provided master widget and sets up the GUI elements for displaying tutorial images.
    Input Parameters:
        master: The master widget of the Tutorial frame.
    Return Value:
        None.

2. get_next(self)
    Purpose:
        Updates the displayed image to the next image in the tutorial when the "Next" button is clicked.
    Input Parameters:
        None.
    Return Value:
        None.

3. open_images(self) -> list[str]
    Purpose:
        Opens tutorial images from a specified directory and converts them into Tkinter PhotoImage objects.
    Input Parameters:
        None.
    Return Value:
        A list of Tkinter PhotoImage objects representing the tutorial images.







Parsing and Program Handling Functions
1. get_program_from_file(path) -> list[int]
    Purpose:
        Reads a program from a file specified by the given path and returns it as a list of integers.
    Input Parameters:
        path: The path to the file that holds the program.
    Return Value:
        A list of integers representing the program.

2. try_parse_cli(program, tries=0)
    Purpose:
        Tries to parse a word from the command line interface (CLI) input and prompts the user for input until a valid word is obtained.
    Input Parameters:
        program: The current program being built.
        tries: The number of attempts made to parse the word.
    Return Value:
        The parsed word as an integer.

3. get_program_from_cli() -> list[int]
    Purpose:
        Obtains a program from the command line interface (CLI) by repeatedly parsing words until the termination word is encountered.
    Input Parameters:
        None.
    Return Value:
        A list of integers representing the program.

4. parse_word(word: str, addr: int) -> int
    Purpose:
        Parses a word from a string and converts it to an integer.
    Input Parameters:
        word: The word that will be parsed.
        addr: The address of the word in the program.
    Return Value:
        The parsed word as an integer.

5. parse_str(program: str) -> int
    Purpose:
        Converts a string representation of a program into a list of integers and validates it.
    Input Parameters:
        program: The string representation of the program.
    Return Value:
        A list of integers representing the validated program.

6. validate_program(program: list[int]) -> list[int]
    Purpose:
        Validates a program by ensuring it is terminated with the correct word and has a length within the allowed limits.
    Input Parameters:
        program: The program that will be validated.
    Return Value:
        The validated program, with proper termination and length.








